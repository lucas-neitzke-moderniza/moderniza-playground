{"version":3,"sources":["../webpack/universalModuleDefinition","@core/components/moderniza/dataview/model/DataviewOptions.js","@core/components/moderniza/dataview/model/DataviewRequestEvent.js","@core/components/moderniza/dataview/model/DataviewRequestContent.js","@core/components/moderniza/dataview/controller/DataviewRequest.js","@core/components/moderniza/dataview/controller/DataviewExport.js","@core/components/moderniza/dataview/controller/DataviewDeviceSize.js","@core/components/moderniza/dataview/controller/DataviewResponsive.js","@core/components/moderniza/dataview/view/components/exportButton.js","@core/components/moderniza/dataview/view/components/layoutButton.js","@core/components/moderniza/dataview/view/components/searchBar.js","@core/components/moderniza/dataview/view/components/sortButton.js","@core/components/moderniza/dataview/view/components/addButton.js","@core/components/moderniza/dataview/view/header.js","@core/components/moderniza/dataview/view/components/paginatorLeft.js","@core/components/moderniza/dataview/view/components/paginatorRight.js","@core/components/moderniza/dataview/view/footer.js","@core/components/moderniza/dataview/view/index.js","@core/components/moderniza/dataview/index.js"],"names":["root","factory","exports","module","define","amd","this","DataviewOptions","options","_classCallCheck","validate","dispatch","e","error","console","table","Error","message","_createClass","key","value","supportedLayouts","supportedExtensions","title","type","includes","concat","join","trim","pagination","page","peerPage","height","peerPageOptions","Array","forEach","filters","Object","keys","map","index","filter","matchMode","constraints","operator","constraint","sorts","sortField","sortOrder","placeholder","optionLabel","className","style","sortOptions","sortOption","label","templates","columns","column","body","header","field","sortable","filterField","filterElement","grid","list","responsive","sm","md","lg","xl","xxl","add","visible","size","icon","severity","onClick","export","extensions","extension","xlsx","csv","pdf","onRequest","onPageChange","onSortChange","onFilterChange","defaultSort","minWidth","defaultExport","defaultExportButtons","defaultAddButton","fileName","originalOptions","defaults","log","build","DataviewRequestEvent","DataviewRequestContent","content","total","DataviewRequest","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","callback","state","response","wrap","_context","prev","next","sent","abrupt","stop","_x","_x2","apply","arguments","exportExcel","_data","then","workbook","Sheets","data","utils","json_to_sheet","SheetNames","buffer","default","Blob","saveAs","saveAsExcelFile","write","bookType","DataviewDeviceSize","_useState","useState","width","window","innerWidth","innerHeight","_useState2","_slicedToArray","setSize","useLayoutEffect","updateSize","addEventListener","removeEventListener","DataviewResponsive","currentLayout","deviceSize","optionsResponsive","fromDefault","current","actual","xs","exportButton","optionsExport","dataTableRef","results","exportColumns","exportOverPanelRef","_optionsExport$xlsx","_optionsExport$xlsx2","_optionsExport$xlsx3","_optionsExport$xlsx4","_optionsExport$xlsx5","_optionsExport$xlsx6","_optionsExport$xlsx7","_optionsExport$pdf","_optionsExport$pdf2","_optionsExport$pdf3","_optionsExport$pdf4","_optionsExport$pdf5","_optionsExport$pdf6","_optionsExport$pdf7","_optionsExport$csv","_optionsExport$csv2","_optionsExport$csv3","_optionsExport$csv4","_optionsExport$csv5","_optionsExport$csv6","_optionsExport$csv7","_jsxs","_Fragment","children","_jsx","Button","toggle","OverlayPanel","ref","jsPDF","doc","autoTable","save","exportPdf","selectionOnly","exportCSV","layoutButton","layout","item","outlined","searchBar","loading","globalFilterValue","onGlobalFilterChange","InputText","disabled","onChange","sortButton","sortKey","Dropdown","_options","push","getOptions","actualState","getState","addButton","addOptions","onChangeLayout","dataTableRefOrSorts","exportOverPanelRefOrSortKey","resultsOrOnSortChange","Row","Col","paginatorLeft","totalRecords","paginatorRight","rows","onChangePeerPageCallback","footer","first","optionsPagination","Paginator","pageLinkSize","rightContent","leftContent","View","props","_options$templates","_options$pagination","_options$pagination2","_options$sorts","_options$sorts2","_options$filters","_options$filters$glob","useRef","dataViewRef","col","dataKey","setLayout","_useState3","_useState4","setLoading","_useState5","_useState6","_useState7","_useState9","_useState10","setPage","_useState11","_useState12","setFirst","_useState13","_useState14","setRows","_useState15","_useState16","setTotalRecords","_useState17","_useState18","setSortKey","_useState19","_useState20","setSortField","_useState21","_useState22","setSortOrder","_useState23","_useState24","setFilters","_useState25","global","_useState26","setGlobalFilterValue","_useState27","_useState28","setResults","lastDeviceSize","_useState29","_useState30","setDeviceSize","useEffect","viewportLayout","freshComponent","request","delayDebounceFn","setTimeout","clearTimeout","_filters","target","_objectSpread","newLayout","DataView","itemTemplate","row","actualLayout","undefined","DataTable","exportFilename","globalFilterFields","filterDisplay","onSort","onFilter","i","Column","dataType","Dataview"],"mappings":"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","file":"static/js/main.88fbba9f.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"test-repository\"] = factory();\n\telse\n\t\troot[\"test-repository\"] = factory();\n})(this, function() {\nreturn ","/* eslint-disable no-unused-vars */\r\nimport { DataviewRequest } from \"../controller\"\r\n\r\n/**\r\n * Dataview configuration\r\n */\r\nclass DataviewOptions {\r\n    /**\r\n     * @param {Object} options \r\n     * @param {String} options.type default: 'table'\r\n     * @param {String} options.height sets the component height\r\n     * @param {String|Boolean} options.title default: false\r\n     * \r\n     * @param {Object} options.pagination\r\n     * @param {Number} options.pagination.page default:0\r\n     * @param {Number} options.pagination.peerPage default: 5\r\n     * @param {Number[]} options.pagination.peerPageOptions default: array (5,10,20,30)\r\n     * \r\n     * @param {{value: String|Null, operator: Object, matchMode: String, constraints: {\r\n     * value: String|Null, matchMode: String}}[]} options.filters primereact datatable api filters\r\n     * \r\n     * @param {Object} options.sorts\r\n     * @param {Boolean} options.sorts.visible\r\n     * @param {String|Null} options.sorts.sortField default: Null\r\n     * @param {Number|Null} options.sorts.sortOrder 1 = ascending, -1 = descending, default: 1\r\n     * @param {String} options.sorts.placeholder sort dropdown placeholder\r\n     * @param {String} options.sorts.optionLabel sort dropdown optionLabel\r\n     * @param {String} options.sorts.className sort dropdown className\r\n     * @param {Object} options.sorts.style sort dropdown style\r\n     * @param {{label: String, value: Any, sorts: {sortOrder: Number, sortField: String}}[]} options.sorts.sortOptions\r\n     * \r\n     * @param {Object} options.templates\r\n     * @param {{header: String, field: String, sortable: Boolean, sortField: String,\r\n     * filter: Boolean, filterField: String, filterElement: Function, \r\n     * body: Function}[]} options.templates.columns columns template\r\n     * @param {Function} options.templates.grid grid template\r\n     * @param {Function} options.templates.list list template\r\n     * \r\n     * @param {{xs: String, sm: String, lg: String, xl: String, xxl:String}} options.responsive\r\n     * \r\n     * @param {{label:String, icon: String, severity: String, className: String, style: Object, onClick: Function, visible: Boolean, size: String}} options.add Add header button\r\n     * \r\n     * @param {Object} options.export\r\n     * @param {Boolean} options.visible\r\n     * @param {String} options.export.type custom export button type\r\n     * @param {String} options.export.size custom export button size\r\n     * @param {String} options.export.severity custom export button severity\r\n     * @param {String} options.export.icon custom export button icon\r\n     * @param {String} options.export.label custom export button label\r\n     * @param {String[]} options.export.extensions extensions to export, supported: ('xlsx', 'pdf', 'csv')\r\n     * @param {{type: String, className: String, size: String, severity: String, label: String, \r\n     * icon: String, style: String}} options.export.xlsx custom xlsx export button\r\n     * @param {{type: String, className: String, size: String, severity: String, label: String, \r\n     * icon: String, style: String}} options.export.pdf custom pdf export button\r\n     * @param {{type: String, className: String, size: String, severity: String, label: String, \r\n     * icon: String, style: String}} options.export.csv custom csv export button\r\n     * \r\n     * @param {DataviewRequest} options.onRequest callback to execute when component requests\r\n     * @param {Function} options.onPageChange callback to execute when the page change\r\n     * @param {Function} options.onSortChange callback to execute when the sort change\r\n     * @param {Function} options.onFilterChange callback to execute when the filter change\r\n     * \r\n     * @param {Boolean} options.build flag\r\n     */\r\n    constructor(options) {\r\n        try {\r\n            if (this.validate(options)) this.dispatch(options)\r\n        } catch (e) {\r\n            /**\r\n             * @type {Error}\r\n             */\r\n            const error = e\r\n            console.table(error)\r\n            throw new Error(error.message)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate Dataview options\r\n     * \r\n     * @param {DataviewOptions} options \r\n     * @returns {Boolean}\r\n     */\r\n    validate(options) {\r\n        // console.log('options', options)\r\n        const supportedLayouts = ['grid', 'list', 'table']\r\n        const supportedExtensions = ['csv', 'xlsx', 'pdf']\r\n\r\n        // ?title (optional)\r\n        if (options.title) {\r\n            if (typeof options.title !== 'string') {\r\n                throw new Error('[options.title] must be typeof string')\r\n            }\r\n        }\r\n        // !type (required)\r\n        if (typeof options.type !== 'string') {\r\n            throw new Error('[options.type] must be typeof string')\r\n        }\r\n        // !type with supports (required)\r\n        if (!supportedLayouts.includes(options.type)) {\r\n            throw new Error(`[options.type] must be one of: ${supportedLayouts.join(', ').trim()}`)\r\n        }\r\n        // !pagination (required)\r\n        if (typeof options.pagination !== 'object') {\r\n            throw new Error('[options.pagination] must be typeof object')\r\n        }\r\n        // !pagination.page (required)\r\n        if (typeof options.pagination.page !== 'number') {\r\n            throw new Error('[options.pagination.page] must be typeof number')\r\n        }\r\n        // !pagination.peerPage (required)\r\n        if (typeof options.pagination.peerPage !== 'number') {\r\n            throw new Error('[options.pagination.peerPage] must be typeof number')\r\n        }\r\n        // ?pagination.height (optional)\r\n        if (options.pagination.height) {\r\n            if (typeof options.pagination.height !== 'string') {\r\n                throw new Error('[options.pagination.height] must be typeof string')\r\n            }\r\n        }\r\n        // ?pagination.peerPageOptions (optional)\r\n        if (options.pagination.peerPageOptions) {\r\n            if (!(options.pagination.peerPageOptions instanceof Array)) {\r\n                throw new Error('[options.pagination.peerPageOptions] must be typeof array')\r\n            }\r\n            // *pagination.peerPageOptions[]\r\n            options.pagination.peerPageOptions.forEach((value) => {\r\n                if (typeof value !== 'number') {\r\n                    throw new Error('[options.pagination.peerPageOptions] each value must be typeof number')\r\n                }\r\n            })\r\n        }\r\n        // ?filters (optional)\r\n        if (options.filters) {\r\n            // *filters\r\n            if (typeof options.filters !== 'object') {\r\n                throw new Error('[options.filters] must be typeof object')\r\n            }\r\n            // *filters.filter\r\n            Object.keys(options.filters).map((key, index) => {\r\n                const filter = options.filters[key]\r\n\r\n                // ?filters.value (value+matchMode) (optional)\r\n                if (filter.value && filter.matchMode) {\r\n                    if (typeof filter.value !== 'string') {\r\n                        throw new Error(`[options.filters[${index}].value] must be typeof string`)\r\n                    }\r\n\r\n                    if (!(typeof filter.matchMode === 'string' || typeof filter.matchMode === 'function')) {\r\n                        throw new Error(`[options.filters[${index}].matchMode] must be typeof string`)\r\n                    }\r\n                } else if (filter.constraints && filter.operator) {\r\n                    // ?filters.filter.operator (operator+constraints)(optional)\r\n                    if (typeof filter.operator !== 'string') {\r\n                        throw new Error(`[options.filters[${index}].operator] must be typeof string`)\r\n                    }\r\n                    if (!(filter.constraints instanceof Array)) {\r\n                        throw new Error(`[options.filters[${index}].constraints] must be typeof array`)\r\n                    }\r\n                    // *filters.filter.constraints[]\r\n                    filter.constraints.forEach((constraint) => {\r\n                        // *filters.filter.constraints[item].value\r\n                        if (constraint.value) {\r\n                            if (typeof constraint.value !== 'string') {\r\n                                throw new Error(`[options.filters[${index}].constraints.value] must be typeof string`)\r\n                            }\r\n                        }\r\n                        // *filters.filter.constraints[item].matchMode\r\n                        if (constraint.matchMode) {\r\n                            if (typeof constraint.matchMode !== 'string') {\r\n                                throw new Error(`[options.filters[${index}].constraints.matchMode] must be typeof string`)\r\n                            }\r\n                        }\r\n                    })\r\n                } else {\r\n                    throw new Error(`[options.filters[${index}]] unknow filter combination\r\n                     (supported: {operator,constraints} or {value,matchMode})`)\r\n                }\r\n            })\r\n        }\r\n\r\n        // ?sorts (optional)\r\n        if (options.sorts) {\r\n            // *sorts\r\n            if (typeof options.sorts !== 'object') {\r\n                throw new Error('[options.sorts] must be typeof object')\r\n            }\r\n            // !sorts[].sortField (required)\r\n            if (typeof options.sorts.sortField !== 'string') {\r\n                throw new Error('[options.sorts.sortField] must be typeof string')\r\n            }\r\n            // !sorts[].sortOrder (required)\r\n            if (typeof options.sorts.sortOrder !== 'number') {\r\n                throw new Error('[options.sorts.sortOrder] must be typeof number')\r\n            }\r\n            // ?sorts[].placeholder (optional)\r\n            if (options.sorts.placeholder) {\r\n                if (typeof options.sorts.placeholder !== 'string') {\r\n                    throw new Error('[options.sorts.placeholder] must be typeof string')\r\n                }\r\n            }\r\n            // ?sorts[].optionLabel (optional)\r\n            if (options.sorts.optionLabel) {\r\n                if (typeof options.sorts.optionLabel !== 'string') {\r\n                    throw new Error('[options.sorts.optionLabel] must be typeof string')\r\n                }\r\n            }\r\n            // ?sorts[].className (optional)\r\n            if (options.sorts.className) {\r\n                if (typeof options.sorts.className !== 'string') {\r\n                    throw new Error('[options.sorts.className] must be typeof string')\r\n                }\r\n            }\r\n            // ?sorts[].style (optional)\r\n            if (options.sorts.style) {\r\n                if (typeof options.sorts.style !== 'object') {\r\n                    throw new Error('[options.sorts.style] must be typeof object')\r\n                }\r\n            }\r\n            // ?sorts[].sortOptions (optional)\r\n            if (options.sorts.sortOptions) {\r\n                if (!(options.sorts.sortOptions instanceof Array)) {\r\n                    throw new Error('[options.sorts.sortOptions] must be typeof array')\r\n                }\r\n                // *sorts[].sortOptions[]\r\n                options.sorts.sortOptions.forEach((sortOption, index) => {\r\n                    // !sorts[].sortOptions[].label (required)\r\n                    if (typeof sortOption.label !== 'string') {\r\n                        throw new Error(`[options.sorts.sortOptions[${index}].label] must be typeof string`)\r\n                    }\r\n                    // !sorts[].sortOptions[].value (required)\r\n                    if (typeof sortOption.value !== 'string') {\r\n                        throw new Error(`[options.sorts.sortOptions[${index}].value] must be typeof string`)\r\n                    }\r\n                    // !sorts[].sortOptions[].sorts.sortOrder (required)\r\n                    if (typeof sortOption.sorts.sortOrder !== 'number') {\r\n                        throw new Error(`[options.sorts.sortOptions[${index}].sorts.sortOrder] must be typeof number`)\r\n                    }\r\n                    // !sorts[].sortOptions[].sorts.sortField (required)\r\n                    if (typeof sortOption.sorts.sortField !== 'string') {\r\n                        throw new Error(`[options.sorts.sortOptions[${index}].sorts.sortField] must be typeof string`)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        // !templates (required)\r\n        if (typeof options.templates !== 'object') {\r\n            throw new Error('[options.templates] must be typeof object')\r\n        }\r\n\r\n        // ?templates.columns (optional)\r\n        if (options.templates.columns) {\r\n            // !templates.columns[] (required)\r\n            if (!(options.templates.columns instanceof Array)) {\r\n                throw new Error('[options.templates.columns] must be typeof array')\r\n            }\r\n            // *templates.columns[]\r\n            options.templates.columns.map((column, index) => {\r\n                // !column.body (required)\r\n                if (typeof column.body !== 'function') {\r\n                    throw new Error(`[options.templates.columns[${index}].body] must be typeof function`)\r\n                }\r\n                // !column.filterField (required)\r\n                if (typeof column.header !== 'string') {\r\n                    throw new Error(`[options.templates.columns[${index}].header] must be typeof string`)\r\n                }\r\n                // !column.filterField (required)\r\n                if (typeof column.field !== 'string') {\r\n                    throw new Error(`[options.templates.columns[${index}].field] must be typeof string`)\r\n                }\r\n                // ?column.sortable (optional)\r\n                if (column.sortable) {\r\n                    if (typeof column.sortable !== 'boolean') {\r\n                        throw new Error(`[options.templates.columns[${index}].sortable] must be typeof boolean`)\r\n                    }\r\n                }\r\n                // ?column.sortField (optional)\r\n                if (column.sortField) {\r\n                    if (typeof column.sortField !== 'string') {\r\n                        throw new Error(`[options.templates.columns[${index}].sortField] must be typeof string`)\r\n                    }\r\n                }\r\n                // ?column.filter (optional)\r\n                if (column.filter) {\r\n                    if (typeof column.filter !== 'boolean') {\r\n                        throw new Error(`[options.templates.columns[${index}].filter] must be typeof boolean`)\r\n                    }\r\n                }\r\n                // ?column.filterField (optional)\r\n                if (column.filterField) {\r\n                    if (typeof column.filterField !== 'string') {\r\n                        throw new Error(`[options.templates.columns[${index}].filterField] must be typeof string`)\r\n                    }\r\n                }\r\n                // ?column.filterField (optional)\r\n                if (column.filterElement) {\r\n                    if (typeof column.filterElement !== 'function') {\r\n                        throw new Error(`[options.templates.columns[${index}].filterElement] must be typeof function`)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        // *templates.grid\r\n        if (options.templates.grid) {\r\n            if (typeof options.templates.grid !== 'function') {\r\n                throw new Error('[options.templates.grid] must be typeof function')\r\n            }\r\n        }\r\n        // *templates.list\r\n        if (options.templates.list) {\r\n            if (typeof options.templates.list !== 'function') {\r\n                throw new Error('[options.templates.list] must be typeof function')\r\n            }\r\n        }\r\n\r\n        // ?responsive (optional)\r\n        if (options.responsive) {\r\n            if (typeof options.responsive !== 'object') {\r\n                throw new Error('[options.responsive] must be typeof object')\r\n            }\r\n            // ?responsive.sm (optional)\r\n            if (options.responsive.sm) {\r\n                if (typeof options.responsive.sm !== 'string') {\r\n                    throw new Error('[options.responsive.sm] must be typeof string')\r\n                }\r\n            }\r\n            // ?responsive.md (optional)\r\n            if (options.responsive.md) {\r\n                if (typeof options.responsive.md !== 'string') {\r\n                    throw new Error('[options.responsive.md] must be typeof string')\r\n                }\r\n            }\r\n\r\n            // ?responsive.lg (optional)\r\n            if (options.responsive.lg) {\r\n                if (typeof options.responsive.lg !== 'string') {\r\n                    throw new Error('[options.responsive.lg] must be typeof string')\r\n                }\r\n            }\r\n\r\n            // ?responsive.xl (optional)\r\n            if (options.responsive.xl) {\r\n                if (typeof options.responsive.xl !== 'string') {\r\n                    throw new Error('[options.responsive.xl] must be typeof string')\r\n                }\r\n            }\r\n\r\n            // ?responsive.xxl (optional)\r\n            if (options.responsive.xxl) {\r\n                if (typeof options.responsive.xxl !== 'string') {\r\n                    throw new Error('[options.responsive.xxl] must be typeof string')\r\n                }\r\n            }\r\n        }\r\n\r\n        // ?add (optional)\r\n        if (options.add) {\r\n            if (typeof options.add !== 'object') {\r\n                throw new Error('[options.add] must be typeof object')\r\n            }\r\n            if (options.add.visible) {\r\n                if (typeof options.add.visible !== 'boolean') {\r\n                    throw new Error('[options.add.visible] must be typeof boolean')\r\n                }\r\n            }\r\n            // ?add.label (optional)\r\n            if (options.add.label) {\r\n                if (typeof options.add.label !== 'string') {\r\n                    throw new Error('[options.add.label] must be typeof string')\r\n                }\r\n            }\r\n            // ?add.icon (optional)\r\n            // ?add.size (optional)\r\n            if (options.add.size) {\r\n                if (typeof options.add.size !== 'string') {\r\n                    throw new Error('[options.add.size] must be typeof string')\r\n                }\r\n            }\r\n            if (options.add.icon) {\r\n                if (typeof options.add.icon !== 'string') {\r\n                    throw new Error('[options.add.icon] must be typeof string')\r\n                }\r\n            }\r\n            // ?add.severity (optional)\r\n            if (options.add.severity) {\r\n                if (typeof options.add.severity !== 'string') {\r\n                    throw new Error('[options.add.severity] must be typeof string')\r\n                }\r\n            }\r\n            // ?add.className (optional)\r\n            if (options.add.className) {\r\n                if (typeof options.add.className !== 'string') {\r\n                    throw new Error('[options.add.className] must be typeof string')\r\n                }\r\n            }\r\n            // ?add.style (optional)\r\n            if (options.add.style) {\r\n                if (typeof options.add.style !== 'object') {\r\n                    throw new Error('[options.add.style] must be typeof object')\r\n                }\r\n            }\r\n            // ?add.onClick (optional)\r\n            if (options.add.onClick) {\r\n                if (typeof options.add.onClick !== 'function') {\r\n                    throw new Error('[options.add.onClick] must be typeof function')\r\n                }\r\n            }\r\n        }\r\n\r\n        // ?export (optional)\r\n        if (options.export) {\r\n            if (typeof options.export !== 'object') {\r\n                throw new Error('[options.export] must be typeof object')\r\n            }\r\n            // ?export.type (optional)\r\n            if (options.export.type) {\r\n                if (typeof options.export.type !== 'string') {\r\n                    throw new Error('[options.export.type] must be typeof string')\r\n                }\r\n            }\r\n            // ?export.size (optional)\r\n            if (options.export.size) {\r\n                if (typeof options.export.size !== 'string') {\r\n                    throw new Error('[options.export.size] must be typeof string')\r\n                }\r\n            }\r\n            // ?export.severity (optional)\r\n            if (options.export.severity) {\r\n                if (typeof options.export.severity !== 'string') {\r\n                    throw new Error('[options.export.severity] must be typeof string')\r\n                }\r\n            }\r\n            // ?export.icon (optional)\r\n            if (options.export.icon) {\r\n                if (typeof options.export.icon !== 'string') {\r\n                    throw new Error('[options.export.icon] must be typeof string')\r\n                }\r\n            }\r\n            // ?export.label (optional)\r\n            if (options.export.label) {\r\n                if (typeof options.export.label !== 'string') {\r\n                    throw new Error('[options.export.label] must be typeof string')\r\n                }\r\n            }\r\n            // ?export.extensions (optional)\r\n            if (options.export.extensions) {\r\n                if (!(options.export.extensions) instanceof Array) {\r\n                    throw new Error('[options.export.extensions] must be typeof array')\r\n                }\r\n                // *options.export.extensions[]\r\n                options.export.extensions.forEach((extension, index) => {\r\n                    // !extension (required)\r\n                    if (typeof extension !== 'string') {\r\n                        throw new Error(`[options.export.extensions[${index}]] must be typeof string`)\r\n                    }\r\n                    // !extensions with supported\r\n                    if (!supportedExtensions.includes(extension)) {\r\n                        throw new Error(`[options.export.extensions[${index}]] must be one of: \r\n                        ${supportedExtensions.join(', ').trim()}`)\r\n                    }\r\n                })\r\n            }\r\n            // ?export.xlsx (optional)\r\n            if (options.export.xlsx) {\r\n                if (typeof options.export.xlsx !== 'object') {\r\n                    throw new Error('[options.export.xlsx] must be typeof object')\r\n                }\r\n                // ?export.xlsx.type (optional)\r\n                if (options.export.xlsx.type) {\r\n                    if (typeof options.export.xlsx.type !== 'string') {\r\n                        throw new Error('[options.export.xlsx.type] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.xlsx.className (optional)\r\n                if (options.export.xlsx.className) {\r\n                    if (typeof options.export.xlsx.className !== 'string') {\r\n                        throw new Error('[options.export.xlsx.className] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.xlsx.size (optional)\r\n                if (options.export.xlsx.size) {\r\n                    if (typeof options.export.xlsx.size !== 'string') {\r\n                        throw new Error('[options.export.xlsx.size] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.xlsx.severity (optional)\r\n                if (options.export.xlsx.severity) {\r\n                    if (typeof options.export.xlsx.severity !== 'string') {\r\n                        throw new Error('[options.export.xlsx.severity] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.xlsx.label (optional)\r\n                if (options.export.xlsx.label) {\r\n                    if (typeof options.export.xlsx.label !== 'string') {\r\n                        throw new Error('[options.export.xlsx.label] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.xlsx.icon (optional)\r\n                if (options.export.xlsx.icon) {\r\n                    if (typeof options.export.xlsx.icon !== 'string') {\r\n                        throw new Error('[options.export.xlsx.icon] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.xlsx.style (optional)\r\n                if (options.export.xlsx.style) {\r\n                    if (typeof options.export.xlsx.style !== 'object') {\r\n                        throw new Error('[options.export.xlsx.style] must be typeof object')\r\n                    }\r\n                }\r\n            }\r\n            // ?export.csv (optional)\r\n            if (options.export.csv) {\r\n                if (typeof options.export.csv !== 'object') {\r\n                    throw new Error('[options.export.csv] must be typeof object')\r\n                }\r\n                // ?export.csv.type (optional)\r\n                if (options.export.csv.type) {\r\n                    if (typeof options.export.csv.type !== 'string') {\r\n                        throw new Error('[options.export.csv.type] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.csv.className (optional)\r\n                if (options.export.csv.className) {\r\n                    if (typeof options.export.csv.className !== 'string') {\r\n                        throw new Error('[options.export.csv.className] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.csv.size (optional)\r\n                if (options.export.csv.size) {\r\n                    if (typeof options.export.csv.size !== 'string') {\r\n                        throw new Error('[options.export.csv.size] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.csv.severity (optional)\r\n                if (options.export.csv.severity) {\r\n                    if (typeof options.export.csv.severity !== 'string') {\r\n                        throw new Error('[options.export.csv.severity] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.csv.label (optional)\r\n                if (options.export.csv.label) {\r\n                    if (typeof options.export.csv.label !== 'string') {\r\n                        throw new Error('[options.export.csv.label] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.csv.icon (optional)\r\n                if (options.export.csv.icon) {\r\n                    if (typeof options.export.csv.icon !== 'string') {\r\n                        throw new Error('[options.export.csv.icon] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.csv.style (optional)\r\n                if (options.export.csv.style) {\r\n                    if (typeof options.export.csv.style !== 'object') {\r\n                        throw new Error('[options.export.csv.style] must be typeof object')\r\n                    }\r\n                }\r\n            }\r\n            // ?export.pdf (optional)\r\n            if (options.export.pdf) {\r\n                if (typeof options.export.pdf !== 'object') {\r\n                    throw new Error('[options.export.pdf] must be typeof object')\r\n                }\r\n                // ?export.pdf.type (optional)\r\n                if (options.export.pdf.type) {\r\n                    if (typeof options.export.pdf.type !== 'string') {\r\n                        throw new Error('[options.export.pdf.type] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.pdf.className (optional)\r\n                if (options.export.pdf.className) {\r\n                    if (typeof options.export.pdf.className !== 'string') {\r\n                        throw new Error('[options.export.pdf.className] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.pdf.size (optional)\r\n                if (options.export.pdf.size) {\r\n                    if (typeof options.export.pdf.size !== 'string') {\r\n                        throw new Error('[options.export.pdf.size] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.pdf.severity (optional)\r\n                if (options.export.pdf.severity) {\r\n                    if (typeof options.export.pdf.severity !== 'string') {\r\n                        throw new Error('[options.export.pdf.severity] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.pdf.label (optional)\r\n                if (options.export.pdf.label) {\r\n                    if (typeof options.export.pdf.label !== 'string') {\r\n                        throw new Error('[options.export.pdf.label] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.pdf.icon (optional)\r\n                if (options.export.pdf.icon) {\r\n                    if (typeof options.export.pdf.icon !== 'string') {\r\n                        throw new Error('[options.export.pdf.icon] must be typeof string')\r\n                    }\r\n                }\r\n                // ?export.pdf.style (optional)\r\n                if (options.export.pdf.style) {\r\n                    if (typeof options.export.pdf.style !== 'object') {\r\n                        throw new Error('[options.export.pdf.style] must be typeof object')\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // !onRequest (required)\r\n        if (typeof options.onRequest !== 'function') {\r\n            throw new Error('[options.onRequest] must be typeof function')\r\n        }\r\n        // ?onPageChange (optional)\r\n        if (options.onPageChange) {\r\n            if (typeof options.onPageChange !== 'function') {\r\n                throw new Error('[options.onPageChange] must be typeof function')\r\n            }\r\n        }\r\n        // ?onSortChange (optional)\r\n        if (options.onSortChange) {\r\n            if (typeof options.onSortChange !== 'function') {\r\n                throw new Error('[options.onSortChange] must be typeof function')\r\n            }\r\n        }\r\n        // ?onFilterChange (optional)\r\n        if (options.onFilterChange) {\r\n            if (typeof options.onFilterChange !== 'function') {\r\n                throw new Error('[options.onFilterChange] must be typeof function')\r\n            }\r\n        }\r\n        return true\r\n\r\n    }\r\n\r\n    /**\r\n     * Mixs the current options with defaults\r\n     * \r\n     * @param {DataviewOptions} options \r\n     * @returns {DataviewOptions}\r\n     */\r\n    defaults(options) {\r\n\r\n        const defaultSort = {\r\n            visible: true,\r\n            className: '',\r\n            placeholder: 'Ordenar resultados',\r\n            optionLabel: 'label',\r\n            style: { minWidth: '100%' }\r\n        }\r\n\r\n        const defaultPeerPageOptions = [5, 10, 20, 30, 40, 50]\r\n\r\n        const defaultExport = {\r\n            visible: true,\r\n            type: 'button',\r\n            className: '',\r\n            size: 'small',\r\n            severity: 'success',\r\n            icon: 'pi pi-file-export',\r\n            label: 'Exportar',\r\n            style: {},\r\n            fileName: 'export'\r\n        }\r\n\r\n        const defaultExportButtons = {\r\n            csv: {\r\n                type: 'button',\r\n                className: '',\r\n                size: 'small',\r\n                severity: 'secondary',\r\n                label: 'Arquivo (.csv)',\r\n                icon: 'pi pi-file',\r\n                style: { minWidth: '160px' }\r\n            },\r\n            pdf: {\r\n                type: 'button',\r\n                className: '',\r\n                size: 'small',\r\n                severity: 'primary',\r\n                label: 'Documento (.pdf)',\r\n                icon: 'pi pi-file-pdf',\r\n                style: { minWidth: '160px' }\r\n            },\r\n            xlsx: {\r\n                type: 'button',\r\n                className: '',\r\n                size: 'small',\r\n                severity: 'success',\r\n                label: 'Planilha (.xlsx)',\r\n                icon: 'pi pi-file-excel',\r\n                style: { minWidth: '160px' }\r\n            }\r\n        }\r\n\r\n        const defaultAddButton = {\r\n            visible: true,\r\n            label: 'Novo',\r\n            icon: 'pi pi-plus',\r\n            size: 'small',\r\n            severity: 'primary',\r\n            className: '',\r\n            style: {}\r\n        }\r\n\r\n        // *DEFAULT HEIGHT\r\n        if (!options.height) {\r\n            options.height = '75vh'\r\n        }\r\n\r\n        // *DEFAULT SORTS\r\n        if (options.sorts) {\r\n            // *DEFAULT SORTS VISIBLE\r\n            if (!options.sorts.visible) {\r\n                options.sorts.visible = defaultSort.visible\r\n            }\r\n            // *DEFAULT SORTS CLASSNAME\r\n            if (!options.sorts.className) {\r\n                options.sorts.className = defaultSort.className\r\n            }\r\n            // *DEFAULT SORTS PLACEHOLDER\r\n            if (!options.sorts.placeholder) {\r\n                options.sorts.placeholder = defaultSort.placeholder\r\n            }\r\n            // *DEFAULT SORTS OPTION LABEL\r\n            if (!options.sorts.optionLabel) {\r\n                options.sorts.optionLabel = defaultSort.optionLabel\r\n            }\r\n            // *DEFAULT SORTS STYLE\r\n            if (!options.sorts.style) {\r\n                options.sorts.style = defaultSort.style\r\n            }\r\n        }\r\n\r\n        // *DEFAULT PAGINATION\r\n        if (options.pagination) {\r\n            // *DEFAULT PAGINATION PEER PAGE OPTIONS\r\n            if (!options.pagination.peerPageOptions) {\r\n                options.pagination.peerPageOptions = defaultPeerPageOptions\r\n            }\r\n        }\r\n\r\n        // *DEFAULT ADD BUTTON\r\n        if (options.add) {\r\n            // *DEFAULT ADD BUTTON VISIBLE\r\n            if (!options.add.visible) {\r\n                options.add.visible = defaultAddButton.visible\r\n            }\r\n            // *DEFAULT ADD BUTTON LABEL\r\n            if (!options.add.label) {\r\n                options.add.label = defaultAddButton.label\r\n            }\r\n            // *DEFAULT ADD BUTTON ICON\r\n            if (!options.add.icon) {\r\n                options.add.icon = defaultAddButton.icon\r\n            }\r\n            // *DEFAULT ADD BUTTON SIZE\r\n            if (!options.add.size) {\r\n                options.add.size = defaultAddButton.size\r\n            }\r\n            // *DEFAULT ADD BUTTON SEVERITY\r\n            if (!options.add.severity) {\r\n                options.add.severity = defaultAddButton.severity\r\n            }\r\n            // *DEFAULT ADD BUTTON CLASSNAME\r\n            if (!options.add.className) {\r\n                options.add.className = defaultAddButton.className\r\n            }\r\n            // *DEFAULT ADD BUTTON STYLE\r\n            if (!options.add.style) {\r\n                options.add.style = defaultAddButton.style\r\n            }\r\n        } else {\r\n            options.add = defaultAddButton\r\n        }\r\n\r\n        // *DEFAULT EXPORT\r\n        if (options.export) {\r\n            // *DEFAULT EXPORT VISIBLE\r\n            if (!options.export.visible) {\r\n                options.export.visible = defaultExport.visible\r\n            }\r\n            // *DEFAULT FILENAME\r\n            if (!options.export.fileName) {\r\n                options.export.fileName = defaultExport.fileName\r\n            }\r\n            // *DEFAULT EXPORT TYPE\r\n            if (!options.export.type) {\r\n                options.export.type = defaultExport.type\r\n            }\r\n            // *DEFAULT EXPORT CLASSNAME\r\n            if (!options.export.className) {\r\n                options.export.className = defaultExport.className\r\n            }\r\n            // *DEFAULT EXPORT SIZE\r\n            if (!options.export.size) {\r\n                options.export.size = defaultExport.size\r\n            }\r\n            // *DEFAULT EXPORT SEVERITY\r\n            if (!options.export.severity) {\r\n                options.export.severity = defaultExport.severity\r\n            }\r\n            // *DEFAULT EXPORT ICON\r\n            if (!options.export.icon) {\r\n                options.export.icon = defaultExport.icon\r\n            }\r\n            // *DEFAULT EXPORT LABEL\r\n            if (!options.export.label) {\r\n                options.export.label = defaultExport.label\r\n            }\r\n            // *DEFAULT EXPORT STYLE\r\n            if (!options.export.style) {\r\n                options.export.style = defaultExport.style\r\n            }\r\n            // *DEFAULT EXPORT CSV\r\n            if (options.export.csv) {\r\n                // *export.csv.type\r\n                if (!options.export.csv.type) {\r\n                    options.export.csv.type = defaultExportButtons.csv.type\r\n                }\r\n                // *export.csv.className\r\n                if (!options.export.csv.className) {\r\n                    options.export.csv.className = defaultExportButtons.csv.className\r\n                }\r\n                // *export.csv.size\r\n                if (!options.export.csv.size) {\r\n                    options.export.csv.size = defaultExportButtons.csv.size\r\n                }\r\n                // *export.csv.severity\r\n                if (!options.export.csv.severity) {\r\n                    options.export.csv.severity = defaultExportButtons.csv.severity\r\n                }\r\n                // *export.csv.label\r\n                if (!options.export.csv.label) {\r\n                    options.export.csv.label = defaultExportButtons.csv.label\r\n                }\r\n                // *export.csv.icon\r\n                if (!options.export.csv.icon) {\r\n                    options.export.csv.icon = defaultExportButtons.csv.icon\r\n                }\r\n                // *export.csv.style\r\n                if (!options.export.csv.style) {\r\n                    options.export.csv.style = defaultExportButtons.csv.style\r\n                }\r\n            } else {\r\n                options.export.csv = defaultExportButtons.csv\r\n            }\r\n            // *DEFAULT EXPORT PDF\r\n            if (options.export.pdf) {\r\n                // *export.pdf.type\r\n                if (!options.export.pdf.type) {\r\n                    options.export.pdf.type = defaultExportButtons.pdf.type\r\n                }\r\n                // *export.pdf.className\r\n                if (!options.export.pdf.className) {\r\n                    options.export.pdf.className = defaultExportButtons.pdf.className\r\n                }\r\n                // *export.pdf.size\r\n                if (!options.export.pdf.size) {\r\n                    options.export.pdf.size = defaultExportButtons.pdf.size\r\n                }\r\n                // *export.pdf.severity\r\n                if (!options.export.pdf.severity) {\r\n                    options.export.pdf.severity = defaultExportButtons.pdf.severity\r\n                }\r\n                // *export.pdf.label\r\n                if (!options.export.pdf.label) {\r\n                    options.export.pdf.label = defaultExportButtons.pdf.label\r\n                }\r\n                // *export.pdf.icon\r\n                if (!options.export.pdf.icon) {\r\n                    options.export.pdf.icon = defaultExportButtons.pdf.icon\r\n                }\r\n                // *export.pdf.style\r\n                if (!options.export.pdf.style) {\r\n                    options.export.pdf.style = defaultExportButtons.pdf.style\r\n                }\r\n            } else {\r\n                options.export.pdf = defaultExportButtons.pdf\r\n            }\r\n            // *DEFAUL EXPORT XLSX\r\n            if (options.export.xlsx) {\r\n                // *export.xlsx.type\r\n                if (!options.export.xlsx.type) {\r\n                    options.export.xlsx.type = defaultExportButtons.xlsx.type\r\n                }\r\n                // *export.xlsx.className\r\n                if (!options.export.xlsx.className) {\r\n                    options.export.xlsx.className = defaultExportButtons.xlsx.className\r\n                }\r\n                // *export.xlsx.size\r\n                if (!options.export.xlsx.size) {\r\n                    options.export.xlsx.size = defaultExportButtons.xlsx.size\r\n                }\r\n                // *export.xlsx.severity\r\n                if (!options.export.xlsx.severity) {\r\n                    options.export.xlsx.severity = defaultExportButtons.xlsx.severity\r\n                }\r\n                // *export.xlsx.label\r\n                if (!options.export.xlsx.label) {\r\n                    options.export.xlsx.label = defaultExportButtons.xlsx.label\r\n                }\r\n                // *export.xlsx.icon\r\n                if (!options.export.xlsx.icon) {\r\n                    options.export.xlsx.icon = defaultExportButtons.xlsx.icon\r\n                }\r\n                // *export.xlsx.style\r\n                if (!options.export.xlsx.style) {\r\n                    options.export.xlsx.style = defaultExportButtons.xlsx.style\r\n                }\r\n            } else {\r\n                options.export.xlsx = defaultExportButtons.xlsx\r\n            }\r\n        }\r\n        return options\r\n    }\r\n\r\n    /**\r\n     * Dispatch the values\r\n     * @param {DataviewOptions} originalOptions \r\n     */\r\n    dispatch(originalOptions) {\r\n        const options = this.defaults(originalOptions)\r\n        console.log('options optimized', options)\r\n        // *CONFIG\r\n        this.type = options.type\r\n        this.title = options.title\r\n        this.height = options.height\r\n        this.pagination = options.pagination\r\n        this.sorts = options.sorts\r\n        this.filters = options.filters\r\n        this.templates = options.templates\r\n        this.responsive = options.responsive\r\n        this.add = options.add\r\n        this.export = options.export\r\n        // *CALLBACKS\r\n        this.onRequest = options.onRequest\r\n        this.onPageChange = options.onPageChange\r\n        this.onSortChange = options.onSortChange\r\n        this.onFilterChange = options.onFilterChange\r\n        // !FLAG: only for read\r\n        this.build = true\r\n    }\r\n\r\n}\r\n\r\nexport default DataviewOptions","\r\n/**\r\n * Event emmited onRequest\r\n */\r\nclass DataviewRequestEvent {\r\n\r\n    /**\r\n     * @param {Object} options\r\n     * \r\n     * @param {Object} options.pagination\r\n     * @param {Number} options.pagination.page default:0\r\n     * @param {Number} options.pagination.peerPage default: 5\r\n     * \r\n     * @param {{value: String, operator: Object, matchMode: String, constraints: {\r\n     * value: String, matchMode: String}}[]} options.filters primereact api filters\r\n     * \r\n     * @param {Object} options.sorts\r\n     * @param {String|null} options.sorts.sortField default: null\r\n     * @param {Number|null} options.sorts.sortOrder 1 = ascending, -1 = descending, default: 1\r\n     */\r\n    constructor(options) {\r\n        this.pagination = options.pagination\r\n        this.filters = options.filters\r\n        this.sorts = options.sorts\r\n    }\r\n}\r\n\r\nexport default DataviewRequestEvent","/**\r\n * onRequest return\r\n */\r\nclass DataviewRequestContent {\r\n    /**\r\n     * \r\n     * @param {Object} options \r\n     * @param {Array} options.content\r\n     * @param {Number} options.total flag\r\n     */\r\n    constructor(options) {\r\n        this.content = options.content\r\n        this.total = options.total\r\n        this.build = true\r\n    }\r\n}\r\n\r\nexport default DataviewRequestContent","import { DataviewRequestEvent, DataviewRequestContent } from \"../model\"\r\n\r\n/**\r\n * Function that requests a async callback with state as parameter\r\n * used as onRequest oeverride callback\r\n * \r\n * @async\r\n * @param {Function} callback function that requests\r\n * @param {DataviewRequestEvent} state current state\r\n * @returns {Promise<DataviewRequestContent>}\r\n */\r\nconst DataviewRequest = async (callback, state) => {\r\n    const response = await callback(state)\r\n    return new DataviewRequestContent(response)\r\n}\r\n\r\nexport default DataviewRequest","const exportCSV = (dataTableRef, selectionOnly) => {\r\n    dataTableRef.current.exportCSV({ selectionOnly })\r\n}\r\n\r\nconst exportPdf = (_data, fileName, exportColumns) => {\r\n    import('jspdf').then((jsPDF) => {\r\n        import('jspdf-autotable').then(() => {\r\n            const doc = new jsPDF.default(0, 0)\r\n            doc.autoTable(exportColumns, _data)\r\n            doc.save(`${fileName}.pdf`)\r\n        })\r\n    })\r\n}\r\n\r\nconst exportExcel = (_data, fileName) => {\r\n\r\n    const saveAsExcelFile = (buffer, fileName) => {\r\n        import('file-saver').then((module) => {\r\n            if (module && module.default) {\r\n                const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n                const EXCEL_EXTENSION = '.xlsx'\r\n                const data = new Blob([buffer], {\r\n                    type: EXCEL_TYPE\r\n                })\r\n\r\n                module.default.saveAs(data, `${fileName}${EXCEL_EXTENSION}`)\r\n            }\r\n        })\r\n    }\r\n\r\n    import('xlsx').then((xlsx) => {\r\n        const worksheet = xlsx.utils.json_to_sheet(_data)\r\n        const workbook = { Sheets: { data: worksheet }, SheetNames: ['data'] }\r\n        const excelBuffer = xlsx.write(workbook, {\r\n            bookType: 'xlsx',\r\n            type: 'array'\r\n        })\r\n\r\n        saveAsExcelFile(excelBuffer, fileName)\r\n    })\r\n}\r\n\r\n\r\nexport {\r\n    exportExcel,\r\n    exportPdf,\r\n    exportCSV\r\n}","import { useState, useLayoutEffect } from 'react'\r\n/**\r\n * Get device demensions\r\n * @returns {{width: Number, height: Number }}\r\n */\r\nconst DataviewDeviceSize = () => {\r\n    const [size, setSize] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    })\r\n    useLayoutEffect(() => {\r\n        const updateSize = () => {\r\n            setSize({\r\n                width: window.innerWidth,\r\n                height: window.innerHeight\r\n            })\r\n        }\r\n        window.addEventListener('resize', updateSize)\r\n        return () => {\r\n            window.removeEventListener('resize', updateSize)\r\n        }\r\n    }, [])\r\n    return size\r\n}\r\n\r\nexport default DataviewDeviceSize","/* eslint-disable no-unused-vars */\r\n\r\n/**\r\n * Change the layout when vieport changes\r\n * \r\n * @param {Function} callback \r\n * @param {String} currentLayout \r\n * @param {{width: Number, height: Number}} deviceSize \r\n * @param {{xs: String, sm: String, lg: String, xl: String, xxl:String}} optionsResponsive\r\n * @returns {String}\r\n */\r\nconst DataviewResponsive = (callback, currentLayout, deviceSize, optionsResponsive) => {\r\n\r\n    /**\r\n     * Clean mode the handdle defaults\r\n     * \r\n     * @param {String} current \r\n     * @param {String} actual \r\n     * @returns {String}\r\n     */\r\n    const fromDefault = (current, actual) => {\r\n        // console.log('current', current, 'actual', actual)\r\n        return current !== actual ? actual : current\r\n    }\r\n\r\n    if (deviceSize.width > 0 && deviceSize.width < 576) {\r\n        // console.log('size xs')\r\n        callback(fromDefault(\r\n            currentLayout,\r\n            optionsResponsive?.xs\r\n        ))\r\n    } else if (deviceSize.width > 576 && deviceSize.width < 768) {\r\n        // console.log('size sm')\r\n        callback(fromDefault(\r\n            currentLayout,\r\n            optionsResponsive?.sm\r\n        ))\r\n    } else if (deviceSize.width > 768 && deviceSize.width < 992) {\r\n        // console.log('size md')\r\n        callback(fromDefault(\r\n            currentLayout,\r\n            optionsResponsive?.md\r\n        ))\r\n    } else if (deviceSize.width > 992 && deviceSize.width < 1200) {\r\n        // console.log('size lg')\r\n        callback(fromDefault(\r\n            currentLayout,\r\n            optionsResponsive?.lg\r\n        ))\r\n    } else if (deviceSize.width > 1200 && deviceSize.width < 1400) {\r\n        // console.log('size xl')\r\n        callback(fromDefault(\r\n            currentLayout,\r\n            optionsResponsive?.xl\r\n        ))\r\n    } else {\r\n        // console.log('size xxl')\r\n        callback(fromDefault(\r\n            currentLayout,\r\n            optionsResponsive?.xxl\r\n        ))\r\n    }\r\n}\r\n\r\n\r\nexport default DataviewResponsive","import React from 'react'\r\nimport { Button } from 'primereact/button'\r\nimport { OverlayPanel } from 'primereact/overlaypanel'\r\nimport {\r\n    exportCSV,\r\n    exportPdf,\r\n    exportExcel\r\n} from '../../controller/DataviewExport'\r\n\r\n/**\r\n * Dataview header export button\r\n * \r\n * @param {Object} optionsExport \r\n * @param {Object} dataTableRef \r\n * @param {Array} results \r\n * @param {String[]} exportColumns \r\n * @param {Object} exportOverPanelRef \r\n * \r\n * @returns {JSX.Element}\r\n */\r\nconst exportButton = (optionsExport, dataTableRef, results, exportColumns, exportOverPanelRef) => {\r\n    /**\r\n     * @type {Array}\r\n     */\r\n    const extensions = optionsExport?.extensions\r\n    return (\r\n        <>\r\n            <Button\r\n                type={optionsExport?.type}\r\n                className={optionsExport?.className}\r\n                size={optionsExport?.size}\r\n                severity={optionsExport?.severity}\r\n                icon={optionsExport?.icon}\r\n                label={optionsExport?.label}\r\n                style={optionsExport?.style}\r\n                onClick={(e) => exportOverPanelRef.current.toggle(e)} />\r\n            <OverlayPanel ref={exportOverPanelRef}>\r\n                {\r\n                    (extensions.includes('xlsx')) ? (\r\n                        <div className='mb-1'>\r\n                            <Button\r\n                                type={optionsExport?.xlsx?.type}\r\n                                className={optionsExport?.xlsx?.className}\r\n                                size={optionsExport?.xlsx?.size}\r\n                                severity={optionsExport?.xlsx?.severity}\r\n                                label={optionsExport?.xlsx?.label}\r\n                                icon={optionsExport?.xlsx?.icon}\r\n                                style={optionsExport?.xlsx?.style}\r\n                                onClick={() => {\r\n                                    exportExcel(results, optionsExport?.fileName)\r\n                                }} />\r\n                        </div>\r\n                    ) : ''\r\n                }\r\n                {\r\n                    (extensions.includes('pdf')) ? (\r\n                        <div className='mb-1'>\r\n                            <Button\r\n                                type={optionsExport?.pdf?.type}\r\n                                className={optionsExport?.pdf?.className}\r\n                                size={optionsExport?.pdf?.size}\r\n                                severity={optionsExport?.pdf?.severity}\r\n                                label={optionsExport?.pdf?.label}\r\n                                icon={optionsExport?.pdf?.icon}\r\n                                style={optionsExport?.pdf?.style}\r\n                                onClick={() => {\r\n                                    exportPdf(results, optionsExport?.fileName, exportColumns)\r\n                                }} />\r\n                        </div>\r\n                    ) : ''\r\n                }\r\n                {\r\n                    (extensions.includes('csv')) ? (\r\n                        <div className='mb-1'>\r\n                            <Button\r\n                                type={optionsExport?.csv?.type}\r\n                                className={optionsExport?.csv?.className}\r\n                                size={optionsExport?.csv?.size}\r\n                                severity={optionsExport?.csv?.severity}\r\n                                label={optionsExport?.csv?.label}\r\n                                icon={optionsExport?.csv?.icon}\r\n                                style={optionsExport?.csv?.style}\r\n                                onClick={() => {\r\n                                    exportCSV(dataTableRef, false)\r\n                                }} />\r\n                        </div>\r\n                    ) : ''\r\n                }\r\n            </OverlayPanel>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default exportButton","/* eslint-disable no-unused-vars */\r\nimport React, { useState } from \"react\"\r\nimport { Button } from \"primereact/button\"\r\n\r\n/**\r\n * Dataview header layout button \r\n * \r\n * @param {String} layout \r\n * @param {Function} callback \r\n * \r\n * @returns {JSX.Element}\r\n */\r\nconst layoutButton = (layout, callback, deviceSize) => {\r\n\r\n    const items = [\r\n        { icon: 'pi pi-th-large', value: 'grid' },\r\n        { icon: 'pi pi-bars', value: 'list' },\r\n        { icon: 'pi pi-table', value: 'table' }\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <div className=\"p-buttonset\">\r\n                {\r\n                    items.map((item, index) => {\r\n                        if (!(item.value === 'table' && deviceSize.width < 575.98)) {\r\n                            return (\r\n                                <Button\r\n                                    key={index}\r\n                                    size='small'\r\n                                    severity=\"primary\"\r\n                                    icon={item.icon}\r\n                                    outlined={item.value !== layout}\r\n                                    onClick={() => callback(item.value)}\r\n                                />\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default layoutButton","import React from 'react'\r\nimport { InputText } from \"primereact/inputtext\"\r\n\r\n/**\r\n * Dataview header search bar\r\n * \r\n * @param {Boolean} loading \r\n * @param {String} globalFilterValue \r\n * @param {Function} onGlobalFilterChange \r\n * \r\n * @returns {JSX.Element}\r\n */\r\nconst searchBar = (loading, globalFilterValue, onGlobalFilterChange) => {\r\n    return (\r\n        <span className=\"p-input-icon-left\"\r\n            style={{\r\n                width: '100%'\r\n            }}>\r\n            <i className=\"pi pi-search\" />\r\n            <InputText\r\n                disabled={loading}\r\n                value={globalFilterValue}\r\n                onChange={onGlobalFilterChange}\r\n                placeholder='Pesquise por qualquer campo...'\r\n                style={{\r\n                    width: '100%'\r\n                }}\r\n            />\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default searchBar","/* eslint-disable no-unused-vars */\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { Dropdown } from \"primereact/dropdown\"\r\nimport { DataviewDeviceSize } from '../../controller'\r\n\r\n/**\r\n * Dataview header sort button\r\n * \r\n * @param {Object} sorts \r\n * @param {String} sortKey \r\n * @param {Function} onSortChange \r\n * \r\n * @returns {JSX.Element}\r\n */\r\nconst sortButton = (sorts, sortKey, onSortChange, deviceSize) => {\r\n\r\n    console.log('device sort', deviceSize)\r\n\r\n    const getLabel = (value) => {\r\n        if (deviceSize.width <= 480) {\r\n            return 'Ordenar'\r\n        } else {\r\n            return value\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} value \r\n     * @param {Array} sortOptions \r\n     */\r\n    const getState = (value, sortOptions) => {\r\n        const sortTest = sortOptions.filter((item) => {\r\n            return item.value === value\r\n        })[0]\r\n        // console.log('sortTest', sortTest)\r\n        return sortTest\r\n    }\r\n\r\n    const getOptions = (_options) => {\r\n        const options = []\r\n        _options.forEach((item) => {\r\n            options.push({\r\n                label: item.label,\r\n                value: item.value\r\n            })\r\n        })\r\n        return options\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dropdown\r\n                options={getOptions(sorts.sortOptions)}\r\n                value={sortKey}\r\n                placeholder={getLabel(sorts?.placeholder)}\r\n                optionLabel={sorts?.optionLabel}\r\n                className={sorts?.className}\r\n                style={sorts?.style}\r\n                onChange={(e) => {\r\n                    const actualState = getState(e.value, sorts.sortOptions)\r\n                    onSortChange({\r\n                        sortField: actualState.sorts.sortField,\r\n                        sortOrder: actualState.sorts.sortOrder,\r\n                        sortKey: e.value\r\n                    })\r\n                }}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default sortButton","/* eslint-disable no-unused-vars */\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { Button } from \"primereact/button\"\r\nimport { DataviewDeviceSize } from \"../../controller\"\r\n\r\n/**\r\n * Add header button\r\n * \r\n* @param {{label:String, icon: String, severity: String, className: String, style: Object, onClick: Function, size: String}} addOptions\r\n * @returns {JSX.Element}\r\n */\r\nconst addButton = (addOptions, deviceSize) => {\r\n\r\n    console.log('testdevice', deviceSize)\r\n\r\n    const getLabel = (value) => {\r\n        console.log('aqui', deviceSize)\r\n        if (deviceSize.width <= 380) {\r\n            return ''\r\n        } else {\r\n            return value\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            label={getLabel(addOptions?.label)}\r\n            icon={addOptions?.icon}\r\n            size={addOptions?.size}\r\n            severity={addOptions?.severity}\r\n            className={addOptions?.className}\r\n            style={addOptions?.style}\r\n            onClick={(e) => {\r\n                if (addOptions?.onClick) {\r\n                    addOptions?.onClick(e)\r\n                }\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default addButton","/* eslint-disable no-unused-vars */\r\nimport React from 'react'\r\nimport { exportButton, layoutButton, searchBar, sortButton, addButton } from './components'\r\nimport { Col, Row } from 'reactstrap'\r\n\r\n/**\r\n * Dataview header view\r\n * \r\n * @param {String} title \r\n * @param {Boolean} loading \r\n * @param {String} layout \r\n * @param {Function} onChangeLayout \r\n * @param {String} globalFilterValue \r\n * @param {Function} onGlobalFilterChange \r\n * @param {Object} optionsExport \r\n * @param {Object} dataTableRefOrSorts \r\n * @param {Object|String} exportOverPanelRefOrSortKey \r\n * @param {Array|Function} resultsOrOnSortChange \r\n * @param {Array} exportColumns \r\n * @param {{width: Number, height: Number }} deviceSize\r\n * \r\n * @returns {JSX.Element}\r\n */\r\nconst header = (title, loading, layout, onChangeLayout, globalFilterValue, onGlobalFilterChange, optionsExport, dataTableRefOrSorts, exportOverPanelRefOrSortKey, resultsOrOnSortChange, exportColumns, sortOptions, addOptions, deviceSize) => {\r\n    return (\r\n        <>\r\n            {\r\n                console.log('devicesize', deviceSize)\r\n            }\r\n            <Row className=\"m-0\">\r\n                <Col xs=\"12\" lg=\"\" className=\"mb-1 mb-lg-auto my-auto\">\r\n                    <Row>\r\n                        <Col xs=\"auto\" sm=\"\" className=\"my-auto ps-0\">\r\n                            {\r\n                                title ? (\r\n                                    <div className=\"flex\">\r\n                                        <h4 className=\"m-0\">{title}</h4>\r\n                                    </div>\r\n                                ) : <></>\r\n                            }\r\n                        </Col>\r\n                        <Col xs=\"\" sm=\"8\" lg=\"auto\" className=\"my-auto pe-0\">\r\n                            {\r\n                                searchBar(loading, globalFilterValue, onGlobalFilterChange)\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n                <Col xs=\"12\" lg=\"auto\" className='ms-auto my-auto'>\r\n                    <Row className=\"justify-content-end\">\r\n                        {\r\n                            optionsExport && optionsExport.visible && layout === 'table' ? (\r\n                                <Col className=\"col-auto pe-0 my-auto\">\r\n                                    {\r\n                                        exportButton(optionsExport, dataTableRefOrSorts, resultsOrOnSortChange, exportColumns, exportOverPanelRefOrSortKey)\r\n                                    }\r\n                                </Col>\r\n                            ) : <></>\r\n                        }\r\n                        {\r\n                            sortOptions.visible && layout !== 'table' && dataTableRefOrSorts.sortOptions ? (\r\n                                <Col className=\"col-auto pe-0 my-auto ps-0 ps-lg-1 flex-grow-1 flex-lg-grow-0\">\r\n                                    {\r\n                                        sortButton(dataTableRefOrSorts, exportOverPanelRefOrSortKey, resultsOrOnSortChange, deviceSize)\r\n                                    }\r\n                                </Col>\r\n                            ) : <></>\r\n                        }\r\n                        <Col className=\"col-auto pe-0 my-auto\">\r\n                            {\r\n                                layoutButton(layout, onChangeLayout, deviceSize)\r\n                            }\r\n                        </Col>\r\n                        {\r\n                            addOptions.visible ? (\r\n                                <Col className=\"col-auto pe-0 my-auto\">\r\n                                    {\r\n                                        addButton(addOptions, deviceSize)\r\n                                    }\r\n                                </Col>\r\n                            ) : <></>\r\n                        }\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            {/* <div className='flex flex-wrap justify-content-end align-items-center'>\r\n                <div className='flex me-auto me:lg-1 justify-content-start align-items-center flex-grow-1'>\r\n                    {\r\n                        title ? (\r\n                            <div className=\"flex me-2\">\r\n                                <h4 className=\"m-0\">{title}</h4>\r\n                            </div>\r\n                        ) : ''\r\n                    }\r\n                </div>\r\n                <div className='flex me-auto lg:me-1 mb-2 lg:mb-0 flex-grow-1'>\r\n                    {\r\n                        searchBar(loading, globalFilterValue, onGlobalFilterChange)\r\n                    }\r\n                </div>\r\n                <div className='header-bottom-content flex flex-row flex-grow-1 lg:flex-grow-0 justify-content-end align-items-center'>\r\n                    <div className=\"flex flex-wrap gap-2 flex-grow-1\">\r\n                        {\r\n                            optionsExport && optionsExport.visible && layout === 'table' ? exportButton(optionsExport, dataTableRefOrSorts, resultsOrOnSortChange, exportColumns, exportOverPanelRefOrSortKey) : ''\r\n                        }\r\n                        {\r\n                            sortOptions.visible && layout !== 'table' && dataTableRefOrSorts.sortOptions ? sortButton(dataTableRefOrSorts, exportOverPanelRefOrSortKey, resultsOrOnSortChange) : ''\r\n                        }\r\n                        {\r\n                            layoutButton(layout, onChangeLayout)\r\n                        }\r\n                        {\r\n                            // TODO: Botão adicionar\r\n                            addOptions.visible ? addButton(addOptions) : ''\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"flex flex-wrap gap-2 justify-content-end align-items-center\">\r\n                {\r\n                    title ? (\r\n                        <div className=\"flex me-auto\">\r\n                            <h4 className=\"m-0\">{title}</h4>\r\n                        </div>\r\n                    ) : ''\r\n                }\r\n                {\r\n                    searchBar(loading, globalFilterValue, onGlobalFilterChange)\r\n                }\r\n                {\r\n                    optionsExport && optionsExport.visible && layout === 'table' ? exportButton(optionsExport, dataTableRefOrSorts, resultsOrOnSortChange, exportColumns, exportOverPanelRefOrSortKey) : ''\r\n                }\r\n                {\r\n                    sortOptions.visible && layout !== 'table' && dataTableRefOrSorts.sortOptions ? sortButton(dataTableRefOrSorts, exportOverPanelRefOrSortKey, resultsOrOnSortChange) : ''\r\n                }\r\n                {\r\n                    layoutButton(layout, onChangeLayout)\r\n                }\r\n                {\r\n                    // TODO: Botão adicionar\r\n                    addOptions.visible ? addButton(addOptions) : ''\r\n                }\r\n            </div> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport {\r\n    header\r\n}","import React from 'react'\r\n\r\n/**\r\n * Dataview footer paginator left\r\n * \r\n * @param {Number} totalRecords \r\n * \r\n * @returns {JSX.Element}\r\n */\r\nconst paginatorLeft = (totalRecords) => {\r\n    return (\r\n        <div>{totalRecords} Resultados</div>\r\n    )\r\n}\r\n\r\nexport default paginatorLeft","import React from 'react'\r\nimport { Dropdown } from \"primereact/dropdown\"\r\n\r\n/**\r\n * Dataview footer paginator right\r\n * \r\n * @param {Number} rows \r\n * @param {Number[]} peerPageOptions \r\n * @param {Function} onChangePeerPageCallback \r\n * \r\n * @returns {JSX.Element}\r\n */\r\nconst paginatorRight = (rows, peerPageOptions, onChangePeerPageCallback) => {\r\n    return (\r\n        <Dropdown value={rows} options={peerPageOptions} onChange={(e) => {\r\n            onChangePeerPageCallback(e)\r\n        }} />\r\n    )\r\n}\r\n\r\nexport default paginatorRight","/* eslint-disable no-unused-vars */\r\nimport React from 'react'\r\nimport { Paginator } from 'primereact/paginator'\r\nimport paginatorLeft from './components/paginatorLeft'\r\nimport paginatorRight from './components/paginatorRight'\r\n\r\n/**\r\n * Dataview footer view\r\n * \r\n * @param {Number} first \r\n * @param {Number} rows \r\n * @param {Number} totalRecords \r\n * @param {Function} onPageChange \r\n * @param {Number[]} peerPageOptions \r\n * @param {Function} onChangePeerPageCallback \r\n * \r\n * @returns {JSX.Element}\r\n */\r\nconst footer = (first, rows, totalRecords, onPageChange, peerPageOptions, onChangePeerPageCallback, optionsPagination, deviceSize) => {\r\n    \r\n    const getPageLinkSize = () => {\r\n        if (deviceSize.width < 575.98) {\r\n            return 1\r\n        } else if (deviceSize.width > 575.98 && deviceSize.width < 767.98) { \r\n            return 3\r\n        } else {\r\n            return 5\r\n        }\r\n    }\r\n\r\n    const getRightContent = () => {\r\n        if (deviceSize.width < 575.98) {\r\n            return <></>\r\n        } else {\r\n            return paginatorRight(rows, peerPageOptions, onChangePeerPageCallback)\r\n        }\r\n    }\r\n\r\n    const getLeftContent = () => {\r\n        if (deviceSize.width < 575.98) {\r\n            return <></>\r\n        } else {\r\n            return paginatorLeft(totalRecords)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        optionsPagination?.visible ? (\r\n            <Paginator\r\n                pageLinkSize={getPageLinkSize()}\r\n                first={first}\r\n                rows={rows}\r\n                totalRecords={totalRecords}\r\n                onPageChange={onPageChange}\r\n                rightContent={getRightContent()}\r\n                leftContent={getLeftContent()}\r\n            />\r\n        ) : <></>\r\n    )\r\n}\r\n\r\nexport {\r\n    footer\r\n}","/* eslint-disable no-unused-vars */\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport { DataTable } from 'primereact/datatable'\r\nimport { Column } from 'primereact/column'\r\nimport { DataView } from 'primereact/dataview'\r\n\r\n// *MVC\r\nimport { DataviewRequest, DataviewDeviceSize, DataviewResponsive } from '../controller'\r\nimport { DataviewRequestEvent, DataviewOptions } from '../model'\r\n\r\n// *HEADER\r\nimport { header } from './header.js'\r\n\r\n// *FOOTER\r\nimport { footer } from './footer.js'\r\n\r\n/**\r\n * View component\r\n * \r\n * @param {Object|DataviewOptions} props.options view options\r\n * @returns {JSX.Element}\r\n */\r\nconst View = (props) => {\r\n\r\n    /**\r\n     * Component options\r\n     * @type {DataviewOptions}\r\n     */\r\n    const options = props.options.build ? props.options : new DataviewOptions(props.options)\r\n    console.log('options', options)\r\n    const templates = options.templates\r\n\r\n    // *REFERENCES\r\n    const dataTableRef = useRef(null)\r\n    const dataViewRef = useRef(null)\r\n    const exportOverPanelRef = useRef(null)\r\n\r\n    const exportColumns = options?.templates?.columns ? options.templates.columns.map((col) => {\r\n        return { title: col.header, dataKey: col.field }\r\n    }) : []\r\n\r\n    const [layout, setLayout] = useState(options.type)\r\n    const [loading, setLoading] = useState(true)\r\n    const [title, setTitle] = useState(options?.title || false)\r\n\r\n    // ? REFACTORY: PAGINATION\r\n    const peerPageDefaultOptions = [\r\n        { label: 5, value: 5 },\r\n        { label: 10, value: 10 },\r\n        { label: 20, value: 20 },\r\n        { label: 30, value: 30 }\r\n    ]\r\n\r\n    const [peerPageOptions] = useState(options?.pagination?.peerPageOptions)\r\n\r\n    const [page, setPage] = useState(0)\r\n    const [first, setFirst] = useState(0)\r\n    const [rows, setRows] = useState(options?.pagination?.peerPage || 5)\r\n    const [totalRecords, setTotalRecords] = useState(0)\r\n\r\n    // *SORTS\r\n    const [sortKey, setSortKey] = useState('')\r\n    const [sortField, setSortField] = useState(options?.sorts?.sortField || null)\r\n    const [sortOrder, setSortOrder] = useState(options?.sorts?.sortOrder || 1)\r\n\r\n    // * FILTERS\r\n    const [filters, setFilters] = useState(options?.filters || [])\r\n\r\n    // *GLOBAL FILTER\r\n    const [globalFilterValue, setGlobalFilterValue] = useState(options?.filters?.global?.value || '')\r\n\r\n    // *DATAVIEW RESULTS\r\n    const [results, setResults] = useState([])\r\n\r\n    // *RESPONSIVE\r\n    const lastDeviceSize = DataviewDeviceSize()\r\n    const [deviceSize, setDeviceSize] = useState(lastDeviceSize)\r\n    useEffect(() => {\r\n        // console.log('lastDeviceSize', lastDeviceSize)\r\n        if (typeof lastDeviceSize.width === 'number' &&\r\n            typeof lastDeviceSize.height === 'number' &&\r\n            options.responsive) {\r\n            // console.log('passei aqui')\r\n            setDeviceSize(lastDeviceSize)\r\n            DataviewResponsive((viewportLayout) => {\r\n                // console.log('viewportLayout', viewportLayout)\r\n                if (layout !== viewportLayout) {\r\n                    setLayout(viewportLayout)\r\n                }\r\n            }, options?.type, lastDeviceSize, options?.responsive)\r\n        }\r\n    }, [lastDeviceSize])\r\n\r\n    // *FRESH THE COMPONENT\r\n    const freshComponent = async () => {\r\n\r\n        setLoading(true)\r\n        setResults([])\r\n        setTotalRecords(0)\r\n\r\n        const request = await DataviewRequest(\r\n            options.onRequest,\r\n            new DataviewRequestEvent({\r\n                pagination: {\r\n                    page,\r\n                    peerPage: rows\r\n                },\r\n                sorts: {\r\n                    sortField,\r\n                    sortOrder\r\n                },\r\n                filters\r\n            })\r\n        )\r\n\r\n        if (request.content && request.total) {\r\n            setResults(request.content)\r\n            setTotalRecords(request.total)\r\n        }\r\n\r\n        setLoading(false)\r\n\r\n    }\r\n\r\n    // *EFFECT TO SEARCH WHEN USER STOPS TYPING\r\n    useEffect(() => {\r\n        const delayDebounceFn = setTimeout(() => {\r\n            if (options.filters) {\r\n                if (filters.global.value !== globalFilterValue) {\r\n                    filters.global.value = globalFilterValue\r\n                    freshComponent()\r\n                }\r\n            }\r\n        }, 3000)\r\n        return () => clearTimeout(delayDebounceFn)\r\n    }, [globalFilterValue])\r\n\r\n\r\n    // *START EFFECT\r\n    useEffect(() => {\r\n        freshComponent()\r\n    }, [page, sortField, sortOrder, rows])\r\n\r\n    // *SORT CALLBACK\r\n    const onSortChange = (e) => {\r\n        // console.log('event dela', e)\r\n        if (options.onSortChange) options.onSortChange(e)\r\n        if (e.sortKey) setSortKey(e.sortKey)\r\n        setSortField(e.sortField)\r\n        setSortOrder(e.sortOrder)\r\n    }\r\n\r\n    // *PAGE CALLBACK\r\n    const onPageChange = (e, index) => {\r\n        if (e.page !== page) {\r\n            if (options.onPageChange) options.onPageChange(e, index)\r\n            setPage(e.page)\r\n            setFirst(e.first)\r\n            setRows(e.rows)\r\n        }\r\n    }\r\n\r\n    //*FILTER CALLBACK\r\n    const onFilterChange = (e) => {\r\n        if (options.onFilterChange) options.onFilterChange(e)\r\n    }\r\n\r\n    // *GLOBAL FILTER CALLBACK\r\n    const onGlobalFilterChange = (e) => {\r\n        const value = e.target.value\r\n        let _filters = {}\r\n        _filters = { ...filters }\r\n        setGlobalFilterValue(value)\r\n        setFilters(_filters)\r\n        setGlobalFilterValue(value)\r\n    }\r\n\r\n    // *LAYOUT CALLBACK\r\n    const onChangeLayout = (newLayout) => {\r\n        setLayout(newLayout)\r\n    }\r\n\r\n    // *PEERPAGE CALLBACK\r\n    const onChangePeerPageCallback = (e) => {\r\n        setFirst(0)\r\n        setRows(e.value)\r\n    }\r\n\r\n    const getGlobalFiltersFields = () => {\r\n        return Object.keys(filters).filter(function (item) {\r\n            return item !== 'global'\r\n        })\r\n    }\r\n\r\n    const itemTemplate = (row, actualLayout) => {\r\n        return options.templates[actualLayout](row)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* {\r\n                console.log('sortField', sortField, 'sortOrder', sortOrder)\r\n            }\r\n            {\r\n                console.log('sortKey', sortKey, 'layout', layout, 'device', deviceSize, 'results', results, 'first', first, 'rows', rows, 'total', totalRecords, 'options', options)\r\n            } */}\r\n            {\r\n                layout === 'grid' || layout === 'list' ? (\r\n                    <>\r\n                        <DataView\r\n                            className='mdz-dataview-component'\r\n                            ref={dataViewRef}\r\n                            loading={loading}\r\n                            value={results}\r\n                            layout={layout}\r\n                            itemTemplate={itemTemplate}\r\n                            header={header(\r\n                                title,\r\n                                loading,\r\n                                layout,\r\n                                onChangeLayout,\r\n                                globalFilterValue,\r\n                                onGlobalFilterChange,\r\n                                options.export,\r\n                                options.sorts,\r\n                                sortKey,\r\n                                onSortChange,\r\n                                undefined,\r\n                                options.sorts,\r\n                                options.add,\r\n                                lastDeviceSize\r\n                            )}\r\n                            footer={footer(\r\n                                first,\r\n                                rows,\r\n                                totalRecords,\r\n                                onPageChange,\r\n                                peerPageOptions,\r\n                                onChangePeerPageCallback,\r\n                                options.pagination,\r\n                                deviceSize\r\n                            )}\r\n                        />\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <DataTable\r\n                            className='mdz-datatable-component'\r\n                            ref={dataTableRef}\r\n                            loading={loading}\r\n                            header={header(\r\n                                title,\r\n                                loading,\r\n                                layout,\r\n                                onChangeLayout,\r\n                                globalFilterValue,\r\n                                onGlobalFilterChange,\r\n                                options.export,\r\n                                dataTableRef,\r\n                                exportOverPanelRef,\r\n                                !options.export ? [] : results,\r\n                                exportColumns,\r\n                                options.sorts,\r\n                                options.add,\r\n                                lastDeviceSize\r\n                            )}\r\n                            value={results}\r\n                            filters={filters}\r\n                            exportFilename={!options.export ? '' : options.export.fileName}\r\n                            globalFilterFields={getGlobalFiltersFields()}\r\n                            filterDisplay=\"menu\"\r\n                            footer={footer(\r\n                                first,\r\n                                rows,\r\n                                totalRecords,\r\n                                onPageChange,\r\n                                peerPageOptions,\r\n                                onChangePeerPageCallback,\r\n                                options.pagination,\r\n                                deviceSize\r\n                            )}\r\n                            onSort={onSortChange}\r\n                            onFilter={onFilterChange}\r\n                            sortField={sortField}\r\n                            sortOrder={sortOrder}\r\n                        >\r\n                            {templates.columns.map((col, i) => (\r\n                                <Column\r\n                                    key={col.field}\r\n                                    dataType={col.dataType}\r\n                                    field={col.field}\r\n                                    filter={col.filter}\r\n                                    filterField={col.filterField}\r\n                                    filterElement={col.filterElement}\r\n                                    sortable={col.sortable}\r\n                                    sortField={col.sortField}\r\n                                    header={col.header}\r\n                                    body={col.body}\r\n                                />\r\n                            ))}\r\n                        </DataTable>\r\n                    </>\r\n                )\r\n            }\r\n            {\r\n                <style>{`.mdz-datatable-component, .mdz-dataview-component{height: ${options?.height} !important;}`}</style>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default View","/* eslint-disable no-unused-vars */\r\n// *React\r\nimport React from 'react'\r\nimport PropTypes from \"prop-types\"\r\n\r\n// *View\r\nimport View from './view'\r\n\r\n// *Models\r\nimport { DataviewOptions } from './model'\r\n\r\n// *STYLES\r\n// import 'primeflex/primeflex.css'\r\nimport 'primereact/resources/themes/lara-light-indigo/theme.css'\r\nimport 'primereact/resources/primereact.css'\r\nimport 'primeicons/primeicons.css'\r\n\r\n/**\r\n * Dataview component\r\n * \r\n * @param {Object|DataviewOptions} props.options options of component\r\n * @returns {JSX.Element}\r\n */\r\nconst Dataview = (props) => {\r\n    return (\r\n        <div>\r\n            <View options={props.options} />\r\n        </div>\r\n    )\r\n}\r\n\r\nDataview.propTypes = {\r\n    // *Options of component\r\n    options: PropTypes.oneOfType([\r\n        PropTypes.instanceOf(DataviewOptions),\r\n        PropTypes.object\r\n    ]).isRequired\r\n}\r\n\r\nexport default Dataview"],"sourceRoot":""}